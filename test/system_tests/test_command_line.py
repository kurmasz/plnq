###############################################################################
#
# command_line_test.py
#
# Tests to verify that the command line handles various flags and/or problems
# correctly.
#
# (c) 2024 Zachary Kurmas
#
###############################################################################

import unittest
import os
import sys
import re
import subprocess


# Get the absolute path to the project root (2 levels up from this file)
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '../..'))

def run_plnq(parameters):
    return subprocess.run([sys.executable, '-m', 'plnq'] + parameters, 
                          #env={**os.environ, 'PYTHONPATH': project_root},
                          cwd=project_root,
                          capture_output=True, text=True)

PLNQ_VERSION_STRING = f'plnq v2.0.1'

class TestCommandLine(unittest.TestCase):

    def test_no_parameters(self):
        result = run_plnq([])

        expected_stderr = re.sub(r'\s+', '', 'usage: plnq [-h] [-v] [--destroy] [--uuid UUID] [--show-notebook-output] [--task-indexes] filename [dir_name]\nplnq: error: the following arguments are required: filename')
        observed_stderr = re.sub(r'\s+', '', result.stderr)

        # The return value and message are determined/generated by the argparse library
        self.assertEqual(2, result.returncode)
        self.assertEqual(expected_stderr, observed_stderr)
        self.assertEqual(f"{PLNQ_VERSION_STRING}\n", result.stdout)

    def test_no_such_file(self):
        result = run_plnq(['no_such_file.ipynb'])
        self.assertEqual(1, result.returncode)
        self.assertEqual('', result.stderr)
        self.assertEqual(f"{PLNQ_VERSION_STRING}\nInput 'no_such_file.ipynb' doesn't exist.\n", result.stdout)

#
# How to test where output goes?
#


if __name__ == '__main__':
    unittest.main()