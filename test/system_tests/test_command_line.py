###############################################################################
#
# command_line_test.py
#
# Tests to verify that the command line handles various flags and/or problems
# correctly.
#
# (c) 2024 Zachary Kurmas
#
###############################################################################

import unittest
import os
import sys
import re
import subprocess

current_dir_name = os.path.dirname(__file__)
plnq_script = f"{current_dir_name}/../../plnq.py"  # This will have to be updated if this file moves.

def run_plnq(parameters):
    return subprocess.run([sys.executable, plnq_script] + parameters, capture_output=True, text=True)

class TestCommandLine(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        assert os.path.exists(plnq_script), "plnq.py not found. Double-check plnq_script variable."

    def test_no_parameters(self):
        result = run_plnq([])

        # The return value and message are determined/generated by the argpare library
        self.assertEqual(2, result.returncode)
        self.assertEqual('usage: plnq [-h] [-v] [--destroy] [--uuid UUID] [--task-indexes]\n            filename [dir_name]\nplnq: error: the following arguments are required: filename\n', result.stderr)
        self.assertEqual('', result.stdout)

    def test_no_such_file(self):
        result = run_plnq(['no_such_file.ipynb'])
        self.assertEqual(1, result.returncode)
        self.assertEqual('', result.stderr)
        self.assertEqual("Input 'no_such_file.ipynb' doesn't exist.\n", result.stdout)

#
# How to test where output goes?
#


if __name__ == '__main__':
    unittest.main()